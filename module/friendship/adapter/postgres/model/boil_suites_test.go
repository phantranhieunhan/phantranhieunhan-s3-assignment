// Code generated by SQLBoiler 4.14.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("Friendships", testFriendships)
	t.Run("Subscriptions", testSubscriptions)
	t.Run("Users", testUsers)
}

func TestDelete(t *testing.T) {
	t.Run("Friendships", testFriendshipsDelete)
	t.Run("Subscriptions", testSubscriptionsDelete)
	t.Run("Users", testUsersDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("Friendships", testFriendshipsQueryDeleteAll)
	t.Run("Subscriptions", testSubscriptionsQueryDeleteAll)
	t.Run("Users", testUsersQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("Friendships", testFriendshipsSliceDeleteAll)
	t.Run("Subscriptions", testSubscriptionsSliceDeleteAll)
	t.Run("Users", testUsersSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("Friendships", testFriendshipsExists)
	t.Run("Subscriptions", testSubscriptionsExists)
	t.Run("Users", testUsersExists)
}

func TestFind(t *testing.T) {
	t.Run("Friendships", testFriendshipsFind)
	t.Run("Subscriptions", testSubscriptionsFind)
	t.Run("Users", testUsersFind)
}

func TestBind(t *testing.T) {
	t.Run("Friendships", testFriendshipsBind)
	t.Run("Subscriptions", testSubscriptionsBind)
	t.Run("Users", testUsersBind)
}

func TestOne(t *testing.T) {
	t.Run("Friendships", testFriendshipsOne)
	t.Run("Subscriptions", testSubscriptionsOne)
	t.Run("Users", testUsersOne)
}

func TestAll(t *testing.T) {
	t.Run("Friendships", testFriendshipsAll)
	t.Run("Subscriptions", testSubscriptionsAll)
	t.Run("Users", testUsersAll)
}

func TestCount(t *testing.T) {
	t.Run("Friendships", testFriendshipsCount)
	t.Run("Subscriptions", testSubscriptionsCount)
	t.Run("Users", testUsersCount)
}

func TestHooks(t *testing.T) {
	t.Run("Friendships", testFriendshipsHooks)
	t.Run("Subscriptions", testSubscriptionsHooks)
	t.Run("Users", testUsersHooks)
}

func TestInsert(t *testing.T) {
	t.Run("Friendships", testFriendshipsInsert)
	t.Run("Friendships", testFriendshipsInsertWhitelist)
	t.Run("Subscriptions", testSubscriptionsInsert)
	t.Run("Subscriptions", testSubscriptionsInsertWhitelist)
	t.Run("Users", testUsersInsert)
	t.Run("Users", testUsersInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {
	t.Run("FriendshipToUserUsingFriend", testFriendshipToOneUserUsingFriend)
	t.Run("FriendshipToUserUsingUser", testFriendshipToOneUserUsingUser)
	t.Run("SubscriptionToUserUsingSubscriber", testSubscriptionToOneUserUsingSubscriber)
	t.Run("SubscriptionToUserUsingUser", testSubscriptionToOneUserUsingUser)
}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {
	t.Run("UserToFriendFriendships", testUserToManyFriendFriendships)
	t.Run("UserToFriendships", testUserToManyFriendships)
	t.Run("UserToSubscriberSubscriptions", testUserToManySubscriberSubscriptions)
	t.Run("UserToSubscriptions", testUserToManySubscriptions)
}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {
	t.Run("FriendshipToUserUsingFriendFriendships", testFriendshipToOneSetOpUserUsingFriend)
	t.Run("FriendshipToUserUsingFriendships", testFriendshipToOneSetOpUserUsingUser)
	t.Run("SubscriptionToUserUsingSubscriberSubscriptions", testSubscriptionToOneSetOpUserUsingSubscriber)
	t.Run("SubscriptionToUserUsingSubscriptions", testSubscriptionToOneSetOpUserUsingUser)
}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {
	t.Run("UserToFriendFriendships", testUserToManyAddOpFriendFriendships)
	t.Run("UserToFriendships", testUserToManyAddOpFriendships)
	t.Run("UserToSubscriberSubscriptions", testUserToManyAddOpSubscriberSubscriptions)
	t.Run("UserToSubscriptions", testUserToManyAddOpSubscriptions)
}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {}

func TestReload(t *testing.T) {
	t.Run("Friendships", testFriendshipsReload)
	t.Run("Subscriptions", testSubscriptionsReload)
	t.Run("Users", testUsersReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("Friendships", testFriendshipsReloadAll)
	t.Run("Subscriptions", testSubscriptionsReloadAll)
	t.Run("Users", testUsersReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("Friendships", testFriendshipsSelect)
	t.Run("Subscriptions", testSubscriptionsSelect)
	t.Run("Users", testUsersSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("Friendships", testFriendshipsUpdate)
	t.Run("Subscriptions", testSubscriptionsUpdate)
	t.Run("Users", testUsersUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("Friendships", testFriendshipsSliceUpdateAll)
	t.Run("Subscriptions", testSubscriptionsSliceUpdateAll)
	t.Run("Users", testUsersSliceUpdateAll)
}
