// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type Friendship struct {
	ID        string           `json:"id"`
	CreatedAt float64          `json:"created_at"`
	UpdatedAt float64          `json:"updated_at"`
	UserID    string           `json:"user_id"`
	FriendID  string           `json:"friend_id"`
	Status    FriendshipStatus `json:"status"`
}

type SubscriptionG struct {
	ID         string             `json:"id"`
	CreatedAt  float64            `json:"created_at"`
	UpdatedAt  float64            `json:"updated_at"`
	User       *User              `json:"user"`
	Subscriber *User              `json:"subscriber"`
	Status     SubscriptionStatus `json:"status"`
}

type User struct {
	ID        string  `json:"id"`
	CreatedAt float64 `json:"created_at"`
	UpdatedAt float64 `json:"updated_at"`
	Username  string  `json:"username"`
	Email     string  `json:"email"`
}

type FriendshipStatus string

const (
	FriendshipStatusFriendshipStatusInvalid    FriendshipStatus = "FRIENDSHIP_STATUS_INVALID"
	FriendshipStatusFriendshipStatusFriended   FriendshipStatus = "FRIENDSHIP_STATUS_FRIENDED"
	FriendshipStatusFriendshipStatusPending    FriendshipStatus = "FRIENDSHIP_STATUS_PENDING"
	FriendshipStatusFriendshipStatusUnfriended FriendshipStatus = "FRIENDSHIP_STATUS_UNFRIENDED"
	FriendshipStatusFriendshipStatusBlocked    FriendshipStatus = "FRIENDSHIP_STATUS_BLOCKED"
)

var AllFriendshipStatus = []FriendshipStatus{
	FriendshipStatusFriendshipStatusInvalid,
	FriendshipStatusFriendshipStatusFriended,
	FriendshipStatusFriendshipStatusPending,
	FriendshipStatusFriendshipStatusUnfriended,
	FriendshipStatusFriendshipStatusBlocked,
}

func (e FriendshipStatus) IsValid() bool {
	switch e {
	case FriendshipStatusFriendshipStatusInvalid, FriendshipStatusFriendshipStatusFriended, FriendshipStatusFriendshipStatusPending, FriendshipStatusFriendshipStatusUnfriended, FriendshipStatusFriendshipStatusBlocked:
		return true
	}
	return false
}

func (e FriendshipStatus) String() string {
	return string(e)
}

func (e *FriendshipStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = FriendshipStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid FriendshipStatus", str)
	}
	return nil
}

func (e FriendshipStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type SubscriptionStatus string

const (
	SubscriptionStatusSubscriptionStatusInvalid      SubscriptionStatus = "SUBSCRIPTION_STATUS_INVALID"
	SubscriptionStatusSubscriptionStatusSubscribed   SubscriptionStatus = "SUBSCRIPTION_STATUS_SUBSCRIBED"
	SubscriptionStatusSubscriptionStatusUnsubscribed SubscriptionStatus = "SUBSCRIPTION_STATUS_UNSUBSCRIBED"
)

var AllSubscriptionStatus = []SubscriptionStatus{
	SubscriptionStatusSubscriptionStatusInvalid,
	SubscriptionStatusSubscriptionStatusSubscribed,
	SubscriptionStatusSubscriptionStatusUnsubscribed,
}

func (e SubscriptionStatus) IsValid() bool {
	switch e {
	case SubscriptionStatusSubscriptionStatusInvalid, SubscriptionStatusSubscriptionStatusSubscribed, SubscriptionStatusSubscriptionStatusUnsubscribed:
		return true
	}
	return false
}

func (e SubscriptionStatus) String() string {
	return string(e)
}

func (e *SubscriptionStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SubscriptionStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SubscriptionStatus", str)
	}
	return nil
}

func (e SubscriptionStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
